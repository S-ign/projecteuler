// Each new term in the Fibonacci sequence is generated by adding the
// previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.

package main

import "fmt"

// fibList generates the fibonacci numbers until provided number
func fibList(i int) (fib []int) {
	sum := 0
	fib = []int{1, 2}

	for sum < i {
		sum = 0

		sum = sumSlice(fib[len(fib)-2:])
		fib = append(fib, sum)

	}
	return
}

func extractEven(s []int) (even []int) {
	for _, v := range s {
		if v%2 == 0 {
			even = append(even, v)
		}
	}
	return
}

func sumSlice(s []int) (sum int) {
	for _, v := range s {
		sum += v
	}
	return
}

func main() {
	fmt.Println(sumSlice(extractEven(fibList(4000000))))
}
